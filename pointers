pointers
Pointers in Go, or any programming language, are variables that
store the memory address of another variable. They are powerful tools
for direct memory access and manipulation.

package main

import "fmt"

func main() {
    var a int = 10    // Declare an integer variable
    var ptr *int      // Declare a pointer variable

    ptr = &a          // Store the address of 'a' in 'ptr'

    fmt.Printf("The value of a is %d\n", a)
    fmt.Printf("The address of a is %p\n", &a)
    fmt.Printf("The value of ptr is %p\n", ptr)
    fmt.Printf("The value stored at ptr is %d\n", *ptr) // Dereference the pointer
}


Swapping Values Using Pointers
package main

import "fmt"

// Function to swap values
func swap(x *int, y *int) {
    temp := *x
    *x = *y
    *y = temp
}

func main() {
    a, b := 5, 10
    fmt.Printf("Before swap: a = %d, b = %d\n", a, b)

    swap(&a, &b)  // Pass the address of a and b

    fmt.Printf("After swap: a = %d, b = %d\n", a, b)
}


Advantages:
Memory Management: Direct access to memory locations.

Efficiency: Useful in large data structures and algorithms.

Flexibility: Can be used to simulate pass-by-reference.
